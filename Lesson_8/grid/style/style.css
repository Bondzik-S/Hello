/* У гріда є декілька властивостей: inlone-grid, display-grid */

.inline-grid{
    display: inline-grid;
}
.grid{
    display: grid;
    /* grid-template-columns: 100px 250px 200px; /* Зміна розмірів колонок */
    /* grid-template-rows: 300px 100px 300px; /* Зміна розмірів рядів */

    /* grid-template-columns: repeat(6, 100px); /* Запис через repeat(). Перше число - число повторів (колонок), друге число - розмірність */

    grid-template-columns: repeat(3, 100px) 200px 150px; /* Ще один варіант з використанням ф-ції  repeat() - перші 3 колонки по 100px, далі 200 та 150 відповідно (також можна обирати відсотки замість пікселів)

    /* grid-template-columns: minmax(300px, 1fr) 2fr 1fr; Фрактали розраховують рощмірність відповідно */

    

    /* minmax - вл-ть, яка допомагає в орієнтації сторінки на пристроях. Перше значення - мінімальне, друге - більше мінімального */

    grid-column-gap: 10px; /* Відступи в грідах (колонки) */
    grid-row-gap: 30px; /* Відступи в грідах (рядки) */

    /* justify-content: end; */
    /* align-items: center; */
}

.grid>div{
    padding: 20px;
    background-color: green;
    color: white;
    font-size: 20px;
}


/* Розміщення блоків гріду за координатами (дивитись в інструментах розробника при натисканні на грід поряд з потрібним елементом) */
/* Заготовка для дз */
.grid div:nth-child(2){
    /* grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3; */

    justify-self: center;
    align-self: center;
}

.grid div:nth-child(3){
    /* grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3; */

    justify-self: end;
    align-self: end;
}

.grid div:nth-child(4){
    /* grid-column-start: 2;
    grid-column-end: 3;
    grid-row-start: 1;
    grid-row-end: 3; */

    justify-self: start;
    align-self: start;
}

.grid-img{
    width: 100%;
}


                                    /* LESSON_9 */

/* Для того, щоб створити грід за допомогою грід-еріа, треба спочатку намалювати каркас задачі. Далі, блоку треба присвоїти дісплей грід та зазначити розмірність та кількість колонок. Потім за допомогою grid-template-areas переносимо каркас гріда, задаючи елементам певних назв, як показано в прикладі.

Наступне, що маємо зробити, це повідомити, як ми назвали кожен елемент. Це робиться за допомогою добре відомого :nth-child(). Задаємо назву за допомогою grid-area. */


.grid-area{
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-areas:
    "left-side-bar header header"
    "left-side-bar content content"
    "left-side-bar article right-side-bar"
    "left-side-bar footer footer";
}

header{
    grid-area: header;
    background-color: orange;
}

aside{
    grid-area: left-side-bar;
    background-color: green;
}

.grid-area div:nth-child(3){
    grid-area: content;
    background-color: rgb(231, 25, 90);
}

.grid-area div:nth-child(4){
    grid-area: right-side-bar;
    background-color: green;
}

.grid-area div:nth-child(5){
    grid-area: article;
    background-color: rgb(53, 185, 237);
}

.grid-area div:nth-child(6){
    grid-area: footer;
    background-color: rgb(121, 232, 23);
}


/* Щоб залишити місце пустим в гріді, при цьому, не зламати код, нам потрібно замість елементу, поставити крапку "." */

@media screen and (max-width: 1600px) {
    .grid-area{
        grid-template-areas:
        "header header header"
        "left-side-bar left-side-bar left-side-bar"
        "content content ."
        "article article right-side-bar"
        "footer footer footer";
    }
}

.content-grid{
    display: grid;
    grid-template-columns: repeat(2, 1fr);
}

.content-grid>div{
    padding: 40px;
    color: #fff;
}

/* Вирівнювання в грідах працює так само, як і в флексах, джастіфай контент, алайн айтемс (24-25 ряд) 

Вирівняти окремо один елемент можна за допомогою тих самих правил, але з приставкою -self (44-45 ряд)*/