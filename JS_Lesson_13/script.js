// Cервери. Запити на сервери. HTTP. AJAX

// Сервер має отримувати запити від браузера

// Браузер із сервером спілкуються за допомогою протоколу http або https

// Головна задача серверу - збереження даних і в подальшому їх обробка і відправлення користувачу певної інформації

// Для того, щоб зʼєднання на сайті було безпечним, потрібно робити запит до хостинг-провайдера і отримувати SSL-сертифікат

/*
При запиті сторінки браузер відправляє текстову команду на сервер.

GET /default.aspx HTTP/1.1
Host: www.example.com

GET - HTTP-дієслово (метод або команда), що описує дію, яку потрібно виконати веб-серверу.
/default.aspx — запитувана на сервері сторінка.

HTTP/1.1 - версія протоколу.

Host: www.example.com - заголовок. Доменне ім'я сайту, до якого виконується запит. Корисно в тому випадку, якщо на сервері одночасно працює декілька веб-додатків.
*/

/* 
HTTP/1.1 200 OK 
Server: Microsoft-IIS/6.0 
Content-Type: text/html 
Content-Length: 36
<html><body>Hello world</body></html>

HTTP/1.1 - протокольна версія 
200 - код статусу 
OK - опис статусу 

Server: Microsoft-IIS/6.0 - заголовок, що містить версію сервера. 
Content-Type: text/html - заголовок з MIME-типом відповіді. 
Це значення потрібно для правильного інтерпретування браузером даних, отриманих від сервера. 
Content-Length: 36 - розмір тіла відповіді в байтах. 
<html><body>Hello world</body></html> - тіло відповіді.
*/

//

// Кожен метод, за допомогою якого ми будемо звертатись до сервера, буде працювати так, як його налаштує бекенд розробник

// Загальноприйняті методи звернення до серверу (не обовʼязково працюватимуть саме так)

/*
HTTP Глагол - Опис (табличка)

OPTIONS - Використовується клієнтським додатком для отримання списку доступних глаголів.
GET - Отримання даних з сервера.
HEAD - Отримання метаданих (заголовків) ресурсу. При цьому запиті ресурс не повертається.
POST - Надсилання даних на сервер для обробки. Зазвичай це дані, введені користувачем у формі на сторінці.
PUT - Дозволяє клієнту створити ресурс за вказаною URL (створити файл на сервері).
DELETE - Видалення ресурсу на сервері.
CONNECT - Команда для використання з проксі-серверами.
 */

// Коли нам приходять дані із серверу, перше, на що ми звертаємо увагу, це на статус код. Статус код повідомляє нам на характер повернутої інформації. Тут дані вже сталі (не залежать від бекенду)

/*
Група - Опис (таблиця)
1xx - Інформаційні (від 100 до 200)
2хх - Успішне завершення (від 200 до 300)
3хх - Команди перенаправлень (від 300 до 400)
4хх - Клієнтські помилки (від 400 до 500)
5хх - Серверні помилки (від 500 до 600)
*/

//

// AJAX - Asynchronous JavaScript і XML (використовується найчастіше)
// Модель для запитів даних OT сервера в фоновому режимі, без перезавантаження веб-сторінки.

// КАРТИНКА НА САЙТІ (ЗМАЛЮВАТИ)

// Асинхронний код - завантаження даних на сторінку без її повного перезавантаження 
// Асинхронні запити - запити на сервер без перезавантаження сторінки

//

// Приклад 1.

{
    window.addEventListener("DOMContentLoaded", function () {


        document.getElementById("btnGet").onclick = function () {

            const xhr = new XMLHttpRequest();          // Создание объекта для HTTP запроса.

            xhr.open("GET", "https://jsonplaceholder.typicode.com/users", false); // Настройка объекта для отправки синхронного GET запроса (get запит, куди ми відправляємо запит, false - синхронний сапит, true - асинхронний запит)
            xhr.send();                              // Отправка запроса, так как запрос является синхронным, следующая строка кода выполнится только после получения ответа со стороны сервера.
            document.getElementById("output").innerHTML = xhr.responseText; // responseText - текст ответа полученного с сервера.
        }
    }
    )
}

//

// Приклад 2.
// Асинхронні запити.
{
    window.onload = function () {

        document.getElementById("btnGet").onclick = function () {
            debugger
            const xhr = new XMLHttpRequest();  
           // console.log(xhr.readyState)        // Создание объекта для HTTP запроса.
            xhr.open("GET", "https://swapi.dev/api/people/");  // Настройка объекта для отправки асинхронного GET запроса; https://swapi.dev/api/people/ - ще один сервер для тестування
           // console.log(xhr.readyState)
            // readyState - функция-обработчик срабатывает при изменении свойства 
            // Значения свойства readyState:
            // 0 - Метод open() еще не вызывался
            // 1 - Метод open() уже был вызван, но метод send() еще не вызывался.
            // 2 - Метод send() был вызван, но ответ от сервера еще не получен
            // 3 - Идет прием данных от сервера. Для значения 3 Firefox вызывает обработчик события несколько раз IE только один раз.
            // 4 - Ответ от сервера полностью получен (Запрос успешно завершен).
        
            // onreadystatechange - це властивість об'єкта XMLHttpRequest у JavaScript, яка вказує на функцію, яка буде викликана при зміні стану об'єкта XMLHttpRequest.
            xhr.onreadystatechange = function () {
             //  console.log(xhr.readyState)
                if (xhr.readyState == 4) { // если получен ответ
                    if (xhr.status == 200) { // и если статус код ответа 200; status - статус код
                        document.getElementById("output").innerHTML += xhr.responseText ; // responseText - текст ответа полученного с сервера.
                    }else{
                        console.log("error")
                    }
                }
            }
            xhr.send();
                            // Отправка запроса, так как запрос асинхронный сценарий продолжит свое выполнение. Когда с сервера придет ответ сработает событие onreadystatechange
        }
    }
}

//

// Приклад 3.
// Відправлення запиту до файлу в папці
{
    window.onload = a => {
        const xhr = new XMLHttpRequest();

        // настройка объекта запроса с указание метода отправи запроса и данных
        xhr.open("GET", "/Samples/02_HttpMethods/GetHandler.ashx?a=hello&b=world"); // /Samples/02_HttpMethods/GetHandler.ashx?a=hello&b=world - шлях до файлу, який ми обрали

        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                document.getElementById("output").innerHTML = xhr.responseText;
            }
        }

        xhr.send();
    }
}

//

// Приклад 4.
// POST - запити
{
    window.onload = function () {
        var xhr = new XMLHttpRequest();

        // настройка объекта запроса с указание метода отправи запроса и данных
        xhr.open("POST", "PostHandler.ashx");
        // Часто при використанні пост запитів, потрібно буде вказувати заголовки 
        // Content-Type - HTTP заголовок, который указывает серверу, как интерпретировать тело запроса.
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.onreadystatechange = function () {
            if (xhr.readyState == 4 && xhr.status == 200) {
                document.getElementById("output").innerHTML = xhr.responseText;
            }
        }

        // отправка запроса с указанием данных.
        xhr.send("a=hello&b=world12");
    }
}